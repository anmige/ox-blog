* ox-blog
The =ox-blog= package allows you to write and publish a blog from within emacs.
- livereload (reload browser on export)
- categories
- drafts
- small enough to read through it
  - < 1000 lines of code (~ 500 at the time of writing)
  - just =htmlize=, =org-mode 9+= & =emacs 25+=

The goal is to provide a user-friendly blogging environment for emacs that just worksâ„¢.
** TODO API (TODO)
*** Functions
- =org-blog-export= export with drafts
- =org-blog-publish= export production (hide drafts) & push =export-directory= repository to origin
*** Variables
- =org-blog-project= project plist, similar to a single entry from =org-publish-project-alist=
- =org-blog-draft-prefix=
- =org-blog--template-index=
- =org-blog--template-index-item=
- =org-blog--template-category-js=
- =org-blog--server-livereload-script=
*** Custom project options
- =:source-directory=
- =:export-directory=
- =:port=
- =:babel-evaluate=
- =:babel-header-args=
- =:index-head=
** Setup
To get started you need set =org-blog-project= and provide a source and an
export directory. Then just start writing and call =org-blog-export= to
export.
#+BEGIN_SRC elisp
(setq org-blog-project '(:source-directory "~/blog/source"
                         :export-directory "~/blog/export"))
#+END_SRC

See the =source/= folder for an example configuration.
* Develoment
#+BEGIN_SRC sh
make install
make test
#+END_SRC
* Features
** Planned
*** theme code blocks
How to allow using a different theme for code blocks

- htmlize css seems fragile. Requires an up to date list of faces used in the
  blog. Also has to be created somehow.
- Export from clean emacs session using =emacs --batch=. Can load any theme and
  set variables to liking without conflicting with actual session. Seems like a
  good solution. Only problem being =emacs --batch= reporting to be monochrome
  and some themes respecting that and not applying. Also requires glue code to
  communicate with subprocess.
- change where htmlize gets it's face definitions from. loading a theme adds
  the face definitions to the face symbol. Looking at the symbol rather than
  the currently applied setting could work.
  Also look into =htmlize-face-overrides=.

*** ertp
Currently ertp extracts the body of the arounds it is passed to make
debugging. That leads to non-intuitive behavior when a around definition is
updated but tests using it still use the old definition until they are
recreated.

Sadly, doing this significantly improves stack trace readability. This is how
it looks without extracting the body.
#+BEGIN_SRC emacs-lisp
(funcall (lambda ()
           (funcall (lambda ()
                      (funcall (lambda ()
                                 (no)))))))
#+END_SRC

#+BEGIN_EXAMPLE
Debugger entered--Lisp error: (void-function no)
  (no)
  (lambda nil (no))()
  funcall((lambda nil (no)))
  (lambda nil (funcall (lambda nil (no))))()
  funcall((lambda nil (funcall (lambda nil (no)))))
  (lambda nil (funcall (lambda nil (funcall (lambda nil (no))))))()
  funcall((lambda nil (funcall (lambda nil (funcall (lambda nil (no)))))))
  (progn (toggle-debug-on-error) (funcall (lambda nil (funcall (lambda nil (funcall (lambda nil (no))))))))
  eval((progn (toggle-debug-on-error) (funcall (lambda nil (funcall (lambda nil (funcall (lambda nil (no)))))))) nil)
  org-babel-execute:emacs-lisp("(toggle-debug-on-error)\n(funcall (lambda ()\n           (funcall (lambda ()\n                      (funcall (lambda ()\n                                 (no)))))))" ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:session . "none") (:cache . "no") (:noweb . "no") (:hlines . "no") (:tangle . "no") (:lexical . "no")))
  org-babel-execute-src-block(nil ("emacs-lisp" "(toggle-debug-on-error)\n(funcall (lambda ()\n           (funcall (lambda ()\n                      (funcall (lambda ()\n                                 (no)))))))" ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:lexical . "no") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no") (:session . "none")) "" nil 2475 "(ref:%s)"))
  org-ctrl-c-ctrl-c(nil)
  funcall-interactively(org-ctrl-c-ctrl-c nil)
  call-interactively(org-ctrl-c-ctrl-c nil nil)
  command-execute(org-ctrl-c-ctrl-c)
#+END_EXAMPLE

And with extraction
#+BEGIN_SRC elisp
(let (())
  (let (())
    (let (())
      (no))))
#+END_SRC

#+BEGIN_EXAMPLE
Debugger entered--Lisp error: (setting-constant nil)
  (let (nil) (let (nil) (let (nil) (no))))
  (progn (let (nil) (let (nil) (let (nil) (no)))))
  eval((progn (let (nil) (let (nil) (let (nil) (no))))) nil)
  org-babel-execute:elisp("(let (())\n  (let (())\n    (let (())\n      (no))))" ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:session . "none") (:cache . "no") (:noweb . "no") (:hlines . "no") (:tangle . "no") (:lexical . "no")))
  org-babel-execute-src-block(nil ("elisp" "(let (())\n  (let (())\n    (let (())\n      (no))))" ((:colname-names) (:rowname-names) (:result-params "replace") (:result-type . value) (:results . "replace") (:exports . "code") (:lexical . "no") (:tangle . "no") (:hlines . "no") (:noweb . "no") (:cache . "no") (:session . "none")) "" nil 4312 "(ref:%s)"))
  org-ctrl-c-ctrl-c(nil)
  funcall-interactively(org-ctrl-c-ctrl-c nil)
  call-interactively(org-ctrl-c-ctrl-c nil nil)
  command-execute(org-ctrl-c-ctrl-c)
#+END_EXAMPLE

Maybe the test case is biased? Need to run more tests.
Would be possible to check whether the function definition has changed and
inline it again in that case but idk if i want to go through all that. maybe
the design is just broken.
*** rss & htmlized source
- org-org-publish-to-org
- org-rss-export-to-rss
